
# name: studio-nuxt-build
# run-name: studio nuxt build

# on:
#   # Runs on pushes targeting the default branch
#   push:
#     branches:
#       - 'master'

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # Add write workflow permissions
# permissions:
#   contents: write

# # Allow one concurrent deployment
# concurrency:
#   group: "pages"
#   cancel-in-progress: true

# jobs:
#   # Build job
#   build-and-deploy:
#     runs-on: ${{ matrix.os }}
#     defaults:
#       run:
#         working-directory: .

#     strategy:
#       matrix:
#         os: [ubuntu-latest]
#         node: [20]

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Identify package manager
#         id: pkgman
#         run: |
#           cache=`[ -f "./pnpm-lock.yaml" ] && echo "pnpm" || ([ -f "./package-lock.json" ] && echo "npm" || ([ -f "./yarn.lock" ] && echo "yarn" || echo ""))`
#           package_manager=`[ ! -z "$cache" ] && echo "$cache" || echo "pnpm"`
#           echo "cache=$cache" >> $GITHUB_OUTPUT
#           echo "package_manager=$package_manager" >> $GITHUB_OUTPUT

#       - uses: pnpm/action-setup@v4
#         if: ${{ steps.pkgman.outputs.package_manager == 'pnpm' }}
#         name: Install pnpm
#         id: pnpm-install

#       - uses: actions/setup-node@v4
#         with:
#           version: ${{ matrix.node }}
#           cache: ${{ steps.pkgman.outputs.cache }}

#       - name: Install dependencies
#         run: ${{ steps.pkgman.outputs.package_manager }} install

#       - name: Generate
#         run: npx nuxi build --preset github_pages
#         env:
#           NUXT_CONTENT_PREVIEW_API: https://api.nuxt.studio
          

#       # Deployment job
#       - name: Deploy 🚀
#         uses: JamesIves/github-pages-deploy-action@v4
name: studio-nuxt-build
run-name: studio nuxt build

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - 'master' # ou 'main', dependendo da sua branch padrão

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Add write workflow permissions
permissions:
  contents: write # Necessário para JamesIves/github-pages-deploy-action fazer push

# Allow one concurrent deployment
concurrency:
  group: "pages" # Ou um nome de grupo específico para este workflow, ex: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build job
  build-and-deploy:
    runs-on: ubuntu-latest # Simplificado, já que a matrix só tinha uma opção de OS
    defaults:
      run:
        working-directory: . # Define o diretório de trabalho para todos os comandos run

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Identify package manager and cache type
        id: pkgman
        run: |
          PACKAGE_MANAGER=""
          CACHE_TYPE=""

          if [ -f "./pnpm-lock.yaml" ]; then
            PACKAGE_MANAGER="pnpm"
            CACHE_TYPE="pnpm"
            echo "Using pnpm"
          elif [ -f "./yarn.lock" ]; then
            PACKAGE_MANAGER="yarn"
            CACHE_TYPE="yarn"
            echo "Using yarn"
          elif [ -f "./package-lock.json" ]; then
            PACKAGE_MANAGER="npm"
            CACHE_TYPE="npm"
            echo "Using npm"
          else
            # Default para pnpm se nenhum arquivo de lock for encontrado
            PACKAGE_MANAGER="pnpm"
            CACHE_TYPE="pnpm"
            echo "No lockfile found. Defaulting to pnpm."
          fi
          echo "package_manager=$PACKAGE_MANAGER" >> $GITHUB_OUTPUT
          echo "cache=$CACHE_TYPE" >> $GITHUB_OUTPUT

      # Configura pnpm se for o gerenciador de pacotes detectado
      - name: Setup pnpm
        if: steps.pkgman.outputs.package_manager == 'pnpm'
        uses: pnpm/action-setup@v4
        # A 'version' foi removida para usar a especificada no package.json

      # Configura Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20 # Use a versão do Node.js do seu projeto, ex: '20.x'
          cache: ${{ steps.pkgman.outputs.cache }}
          cache-dependency-path: '**/pnpm-lock.yaml' # Para pnpm

      # Instala ferramentas de build necessárias para módulos nativos
      - name: Install build tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libsqlite3-dev build-essential python3

      # Instala dependências e força a recompilação do better-sqlite3
      - name: Install dependencies and rebuild native modules
        run: |
          if [ "${{ steps.pkgman.outputs.package_manager }}" = "pnpm" ]; then
            ${{ steps.pkgman.outputs.package_manager }} install --frozen-lockfile
            echo "Attempting to rebuild better-sqlite3..."
            ${{ steps.pkgman.outputs.package_manager }} rebuild better-sqlite3
          elif [ "${{ steps.pkgman.outputs.package_manager }}" = "yarn" ]; then
            ${{ steps.pkgman.outputs.package_manager }} install --frozen-lockfile
            # Para yarn, a recompilação pode ser feita de forma diferente ou pode não ser necessária
            # se o yarn.lock estiver correto e as ferramentas de build presentes.
            # Se o problema persistir com yarn, pode ser necessário adicionar:
            # ${{ steps.pkgman.outputs.package_manager }} add better-sqlite3 --force
            echo "Yarn install complete. Native module rebuild might need specific handling if issues persist."
          elif [ "${{ steps.pkgman.outputs.package_manager }}" = "npm" ]; then
            ${{ steps.pkgman.outputs.package_manager }} ci
            echo "Attempting to rebuild better-sqlite3..."
            ${{ steps.pkgman.outputs.package_manager }} rebuild better-sqlite3
          else
            echo "Unsupported package manager: ${{ steps.pkgman.outputs.package_manager }}"
            exit 1
          fi
        env:
          # Forçar a compilação a partir do código fonte para better-sqlite3
          npm_config_build_from_source: true # Pode ajudar a garantir que ele use as ferramentas locais

      # Gera o site estático
      - name: Generate static site
        run: ${{ steps.pkgman.outputs.package_manager }} exec nuxi build --preset github_pages
        env:
          NUXT_CONTENT_PREVIEW_API: https://api.nuxt.studio
          NODE_ENV: production # Definindo explicitamente

      # Faz o deploy para o GitHub Pages
      - name: Deploy to GitHub Pages 🚀
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ./.output/public
          # branch: gh-pages # Opcional
          # clean: true # Opcional

#         with:
#           folder: ./.output/public
